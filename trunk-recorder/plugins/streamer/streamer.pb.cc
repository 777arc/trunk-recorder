// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: streamer.proto

#include "streamer.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2ftimestamp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_streamer_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CallInfo_streamer_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_streamer_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RecorderInfo_streamer_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_streamer_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SourceInfo_streamer_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_streamer_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SystemInfo_streamer_2eproto;
namespace streamer {
class AudioSampleDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AudioSample> _instance;
} _AudioSample_default_instance_;
class RecorderInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RecorderInfo> _instance;
} _RecorderInfo_default_instance_;
class SourceInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SourceInfo> _instance;
} _SourceInfo_default_instance_;
class SystemInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SystemInfo> _instance;
} _SystemInfo_default_instance_;
class ConfigInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ConfigInfo> _instance;
} _ConfigInfo_default_instance_;
class CallInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CallInfo> _instance;
} _CallInfo_default_instance_;
class SignalInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SignalInfo> _instance;
} _SignalInfo_default_instance_;
}  // namespace streamer
static void InitDefaultsscc_info_AudioSample_streamer_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::streamer::_AudioSample_default_instance_;
    new (ptr) ::streamer::AudioSample();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::streamer::AudioSample::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AudioSample_streamer_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AudioSample_streamer_2eproto}, {
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,}};

static void InitDefaultsscc_info_CallInfo_streamer_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::streamer::_CallInfo_default_instance_;
    new (ptr) ::streamer::CallInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::streamer::CallInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CallInfo_streamer_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CallInfo_streamer_2eproto}, {}};

static void InitDefaultsscc_info_ConfigInfo_streamer_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::streamer::_ConfigInfo_default_instance_;
    new (ptr) ::streamer::ConfigInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::streamer::ConfigInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ConfigInfo_streamer_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ConfigInfo_streamer_2eproto}, {
      &scc_info_SourceInfo_streamer_2eproto.base,
      &scc_info_SystemInfo_streamer_2eproto.base,}};

static void InitDefaultsscc_info_RecorderInfo_streamer_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::streamer::_RecorderInfo_default_instance_;
    new (ptr) ::streamer::RecorderInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::streamer::RecorderInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RecorderInfo_streamer_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RecorderInfo_streamer_2eproto}, {}};

static void InitDefaultsscc_info_SignalInfo_streamer_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::streamer::_SignalInfo_default_instance_;
    new (ptr) ::streamer::SignalInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::streamer::SignalInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_SignalInfo_streamer_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_SignalInfo_streamer_2eproto}, {
      &scc_info_CallInfo_streamer_2eproto.base,
      &scc_info_SystemInfo_streamer_2eproto.base,
      &scc_info_RecorderInfo_streamer_2eproto.base,}};

static void InitDefaultsscc_info_SourceInfo_streamer_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::streamer::_SourceInfo_default_instance_;
    new (ptr) ::streamer::SourceInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::streamer::SourceInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SourceInfo_streamer_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SourceInfo_streamer_2eproto}, {}};

static void InitDefaultsscc_info_SystemInfo_streamer_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::streamer::_SystemInfo_default_instance_;
    new (ptr) ::streamer::SystemInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::streamer::SystemInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SystemInfo_streamer_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SystemInfo_streamer_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_streamer_2eproto[7];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_streamer_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_streamer_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_streamer_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::streamer::AudioSample, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::streamer::AudioSample, sample_time_),
  PROTOBUF_FIELD_OFFSET(::streamer::AudioSample, recorder_num_),
  PROTOBUF_FIELD_OFFSET(::streamer::AudioSample, sample_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::streamer::RecorderInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::streamer::RecorderInfo, recorder_num_),
  PROTOBUF_FIELD_OFFSET(::streamer::RecorderInfo, recorder_type_),
  PROTOBUF_FIELD_OFFSET(::streamer::RecorderInfo, source_num_),
  PROTOBUF_FIELD_OFFSET(::streamer::RecorderInfo, id_),
  PROTOBUF_FIELD_OFFSET(::streamer::RecorderInfo, recorder_count_),
  PROTOBUF_FIELD_OFFSET(::streamer::RecorderInfo, recorder_duration_),
  PROTOBUF_FIELD_OFFSET(::streamer::RecorderInfo, recorder_state_),
  PROTOBUF_FIELD_OFFSET(::streamer::RecorderInfo, status_len_),
  PROTOBUF_FIELD_OFFSET(::streamer::RecorderInfo, status_error_),
  PROTOBUF_FIELD_OFFSET(::streamer::RecorderInfo, status_spike_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::streamer::SourceInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::streamer::SourceInfo, source_num_),
  PROTOBUF_FIELD_OFFSET(::streamer::SourceInfo, min_hz_),
  PROTOBUF_FIELD_OFFSET(::streamer::SourceInfo, max_hz_),
  PROTOBUF_FIELD_OFFSET(::streamer::SourceInfo, center_hz_),
  PROTOBUF_FIELD_OFFSET(::streamer::SourceInfo, rate_),
  PROTOBUF_FIELD_OFFSET(::streamer::SourceInfo, driver_),
  PROTOBUF_FIELD_OFFSET(::streamer::SourceInfo, device_),
  PROTOBUF_FIELD_OFFSET(::streamer::SourceInfo, antenna_),
  PROTOBUF_FIELD_OFFSET(::streamer::SourceInfo, error_),
  PROTOBUF_FIELD_OFFSET(::streamer::SourceInfo, mix_gain_),
  PROTOBUF_FIELD_OFFSET(::streamer::SourceInfo, lna_gain_),
  PROTOBUF_FIELD_OFFSET(::streamer::SourceInfo, vga1_gain_),
  PROTOBUF_FIELD_OFFSET(::streamer::SourceInfo, vga2_gain_),
  PROTOBUF_FIELD_OFFSET(::streamer::SourceInfo, bb_gain_),
  PROTOBUF_FIELD_OFFSET(::streamer::SourceInfo, gain_),
  PROTOBUF_FIELD_OFFSET(::streamer::SourceInfo, if_gain_),
  PROTOBUF_FIELD_OFFSET(::streamer::SourceInfo, analog_recorders_),
  PROTOBUF_FIELD_OFFSET(::streamer::SourceInfo, digital_recorders_),
  PROTOBUF_FIELD_OFFSET(::streamer::SourceInfo, debug_recorders_),
  PROTOBUF_FIELD_OFFSET(::streamer::SourceInfo, sigmf_recorders_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::streamer::SystemInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::streamer::SystemInfo, system_num_),
  PROTOBUF_FIELD_OFFSET(::streamer::SystemInfo, system_type_),
  PROTOBUF_FIELD_OFFSET(::streamer::SystemInfo, system_name_),
  PROTOBUF_FIELD_OFFSET(::streamer::SystemInfo, audio_archive_),
  PROTOBUF_FIELD_OFFSET(::streamer::SystemInfo, upload_script_),
  PROTOBUF_FIELD_OFFSET(::streamer::SystemInfo, record_unknown_),
  PROTOBUF_FIELD_OFFSET(::streamer::SystemInfo, call_log_),
  PROTOBUF_FIELD_OFFSET(::streamer::SystemInfo, talkgroups_file_),
  PROTOBUF_FIELD_OFFSET(::streamer::SystemInfo, analog_levels_),
  PROTOBUF_FIELD_OFFSET(::streamer::SystemInfo, digital_levels_),
  PROTOBUF_FIELD_OFFSET(::streamer::SystemInfo, qpsk_),
  PROTOBUF_FIELD_OFFSET(::streamer::SystemInfo, squelch_db_),
  PROTOBUF_FIELD_OFFSET(::streamer::SystemInfo, channels_),
  PROTOBUF_FIELD_OFFSET(::streamer::SystemInfo, bandplan_),
  PROTOBUF_FIELD_OFFSET(::streamer::SystemInfo, bandfreq_),
  PROTOBUF_FIELD_OFFSET(::streamer::SystemInfo, bandplan_base_),
  PROTOBUF_FIELD_OFFSET(::streamer::SystemInfo, bandplan_high_),
  PROTOBUF_FIELD_OFFSET(::streamer::SystemInfo, bandplan_spacing_),
  PROTOBUF_FIELD_OFFSET(::streamer::SystemInfo, bandplan_offset_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::streamer::ConfigInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::streamer::ConfigInfo, sources_),
  PROTOBUF_FIELD_OFFSET(::streamer::ConfigInfo, systems_),
  PROTOBUF_FIELD_OFFSET(::streamer::ConfigInfo, capture_dir_),
  PROTOBUF_FIELD_OFFSET(::streamer::ConfigInfo, upload_server_),
  PROTOBUF_FIELD_OFFSET(::streamer::ConfigInfo, call_timeout_),
  PROTOBUF_FIELD_OFFSET(::streamer::ConfigInfo, log_file_),
  PROTOBUF_FIELD_OFFSET(::streamer::ConfigInfo, instance_id_),
  PROTOBUF_FIELD_OFFSET(::streamer::ConfigInfo, instance_key_),
  PROTOBUF_FIELD_OFFSET(::streamer::ConfigInfo, broadcast_signals_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::streamer::CallInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::streamer::CallInfo, call_active_),
  PROTOBUF_FIELD_OFFSET(::streamer::CallInfo, recorder_num_),
  PROTOBUF_FIELD_OFFSET(::streamer::CallInfo, system_num_),
  PROTOBUF_FIELD_OFFSET(::streamer::CallInfo, curr_freq_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::streamer::SignalInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::streamer::SignalInfo, unit_id_),
  PROTOBUF_FIELD_OFFSET(::streamer::SignalInfo, signaling_type_),
  PROTOBUF_FIELD_OFFSET(::streamer::SignalInfo, signal_type_),
  PROTOBUF_FIELD_OFFSET(::streamer::SignalInfo, call_info_),
  PROTOBUF_FIELD_OFFSET(::streamer::SignalInfo, system_info_),
  PROTOBUF_FIELD_OFFSET(::streamer::SignalInfo, recorder_info_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::streamer::AudioSample)},
  { 8, -1, sizeof(::streamer::RecorderInfo)},
  { 23, -1, sizeof(::streamer::SourceInfo)},
  { 48, -1, sizeof(::streamer::SystemInfo)},
  { 72, -1, sizeof(::streamer::ConfigInfo)},
  { 86, -1, sizeof(::streamer::CallInfo)},
  { 95, -1, sizeof(::streamer::SignalInfo)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::streamer::_AudioSample_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::streamer::_RecorderInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::streamer::_SourceInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::streamer::_SystemInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::streamer::_ConfigInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::streamer::_CallInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::streamer::_SignalInfo_default_instance_),
};

const char descriptor_table_protodef_streamer_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016streamer.proto\022\010streamer\032\033google/proto"
  "buf/empty.proto\032\037google/protobuf/timesta"
  "mp.proto\"d\n\013AudioSample\022/\n\013sample_time\030\001"
  " \001(\0132\032.google.protobuf.Timestamp\022\024\n\014reco"
  "rder_num\030\002 \001(\005\022\016\n\006sample\030\003 \001(\014\"\326\002\n\014Recor"
  "derInfo\022\024\n\014recorder_num\030\001 \001(\005\022\025\n\rrecorde"
  "r_type\030\002 \001(\t\022\022\n\nsource_num\030\003 \001(\005\022\n\n\002id\030\004"
  " \001(\t\022\026\n\016recorder_count\030\005 \001(\005\022\031\n\021recorder"
  "_duration\030\006 \001(\001\022<\n\016recorder_state\030\007 \001(\0162"
  "$.streamer.RecorderInfo.RecorderState\022\022\n"
  "\nstatus_len\030\010 \001(\001\022\024\n\014status_error\030\t \001(\001\022"
  "\024\n\014status_spike\030\n \001(\001\"H\n\rRecorderState\022\016"
  "\n\nMonitoring\020\000\022\r\n\tRecording\020\001\022\014\n\010Inactiv"
  "e\020\002\022\n\n\006Active\020\003\"\202\003\n\nSourceInfo\022\022\n\nsource"
  "_num\030\001 \001(\005\022\016\n\006min_hz\030\002 \001(\001\022\016\n\006max_hz\030\003 \001"
  "(\001\022\021\n\tcenter_hz\030\004 \001(\001\022\014\n\004rate\030\005 \001(\001\022\016\n\006d"
  "river\030\006 \001(\t\022\016\n\006device\030\007 \001(\t\022\017\n\007antenna\030\010"
  " \001(\t\022\r\n\005error\030\t \001(\001\022\020\n\010mix_gain\030\n \001(\005\022\020\n"
  "\010lna_gain\030\013 \001(\005\022\021\n\tvga1_gain\030\014 \001(\005\022\021\n\tvg"
  "a2_gain\030\r \001(\005\022\017\n\007bb_gain\030\016 \001(\005\022\014\n\004gain\030\017"
  " \001(\005\022\017\n\007if_gain\030\020 \001(\005\022\030\n\020analog_recorder"
  "s\030\021 \001(\005\022\031\n\021digital_recorders\030\022 \001(\005\022\027\n\017de"
  "bug_recorders\030\023 \001(\005\022\027\n\017sigmf_recorders\030\024"
  " \001(\005\"\243\003\n\nSystemInfo\022\022\n\nsystem_num\030\001 \001(\005\022"
  "\023\n\013system_type\030\002 \001(\t\022\023\n\013system_name\030\003 \001("
  "\t\022\025\n\raudio_archive\030\004 \001(\010\022\025\n\rupload_scrip"
  "t\030\005 \001(\t\022\026\n\016record_unknown\030\006 \001(\010\022\020\n\010call_"
  "log\030\007 \001(\010\022\027\n\017talkgroups_file\030\010 \001(\t\022\025\n\ran"
  "alog_levels\030\t \001(\001\022\026\n\016digital_levels\030\n \001("
  "\001\022\014\n\004qpsk\030\013 \001(\010\022\022\n\nsquelch_db\030\014 \001(\001\022\020\n\010c"
  "hannels\030\r \003(\001\022\020\n\010bandplan\030\016 \001(\t\022\020\n\010bandf"
  "req\030\017 \001(\005\022\025\n\rbandplan_base\030\020 \001(\001\022\025\n\rband"
  "plan_high\030\021 \001(\001\022\030\n\020bandplan_spacing\030\022 \001("
  "\001\022\027\n\017bandplan_offset\030\023 \001(\005\"\364\001\n\nConfigInf"
  "o\022%\n\007sources\030\001 \003(\0132\024.streamer.SourceInfo"
  "\022%\n\007systems\030\002 \003(\0132\024.streamer.SystemInfo\022"
  "\023\n\013capture_dir\030\003 \001(\t\022\025\n\rupload_server\030\004 "
  "\001(\t\022\024\n\014call_timeout\030\005 \001(\005\022\020\n\010log_file\030\006 "
  "\001(\010\022\023\n\013instance_id\030\007 \001(\t\022\024\n\014instance_key"
  "\030\010 \001(\t\022\031\n\021broadcast_signals\030\t \001(\010\"\\\n\010Cal"
  "lInfo\022\023\n\013call_active\030\001 \001(\010\022\024\n\014recorder_n"
  "um\030\002 \001(\005\022\022\n\nsystem_num\030\003 \001(\005\022\021\n\tcurr_fre"
  "q\030\004 \001(\001\"\262\003\n\nSignalInfo\022\017\n\007unit_id\030\001 \001(\003\022"
  "\026\n\016signaling_type\030\002 \001(\t\0224\n\013signal_type\030\003"
  " \001(\0162\037.streamer.SignalInfo.SignalType\022%\n"
  "\tcall_info\030\004 \001(\0132\022.streamer.CallInfo\022)\n\013"
  "system_info\030\005 \001(\0132\024.streamer.SystemInfo\022"
  "-\n\rrecorder_info\030\006 \001(\0132\026.streamer.Record"
  "erInfo\"\303\001\n\nSignalType\022\n\n\006Normal\020\000\022\r\n\tEme"
  "rgency\020\001\022\020\n\014EmergencyAck\020\002\022\016\n\nRadioCheck"
  "\020\003\022\021\n\rRadioCheckAck\020\004\022\r\n\tRadioStun\020\005\022\020\n\014"
  "RadioStunAck\020\006\022\017\n\013RadioRevive\020\007\022\022\n\016Radio"
  "ReviveAck\020\010\022\r\n\tNormalPre\020\t\022\020\n\014EmergencyP"
  "re\020\n2\200\004\n\025TrunkRecorderStreamer\022=\n\nSendSt"
  "ream\022\025.streamer.AudioSample\032\026.google.pro"
  "tobuf.Empty(\001\022<\n\nSendSignal\022\024.streamer.S"
  "ignalInfo\032\026.google.protobuf.Empty(\001\0229\n\013C"
  "allStarted\022\022.streamer.CallInfo\032\026.google."
  "protobuf.Empty\0227\n\tCallEnded\022\022.streamer.C"
  "allInfo\032\026.google.protobuf.Empty\022\?\n\rSetup"
  "Recorder\022\026.streamer.RecorderInfo\032\026.googl"
  "e.protobuf.Empty\022;\n\013SetupSystem\022\024.stream"
  "er.SystemInfo\032\026.google.protobuf.Empty\022;\n"
  "\013SetupSource\022\024.streamer.SourceInfo\032\026.goo"
  "gle.protobuf.Empty\022;\n\013SetupConfig\022\024.stre"
  "amer.ConfigInfo\032\026.google.protobuf.EmptyB"
  "=\n\032io.trunk.recorder.streamerP\001\242\002\003TRS\252\002\026"
  "TrunkRecorder.Streamerb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_streamer_2eproto_deps[2] = {
  &::descriptor_table_google_2fprotobuf_2fempty_2eproto,
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_streamer_2eproto_sccs[7] = {
  &scc_info_AudioSample_streamer_2eproto.base,
  &scc_info_CallInfo_streamer_2eproto.base,
  &scc_info_ConfigInfo_streamer_2eproto.base,
  &scc_info_RecorderInfo_streamer_2eproto.base,
  &scc_info_SignalInfo_streamer_2eproto.base,
  &scc_info_SourceInfo_streamer_2eproto.base,
  &scc_info_SystemInfo_streamer_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_streamer_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_streamer_2eproto = {
  false, false, descriptor_table_protodef_streamer_2eproto, "streamer.proto", 2710,
  &descriptor_table_streamer_2eproto_once, descriptor_table_streamer_2eproto_sccs, descriptor_table_streamer_2eproto_deps, 7, 2,
  schemas, file_default_instances, TableStruct_streamer_2eproto::offsets,
  file_level_metadata_streamer_2eproto, 7, file_level_enum_descriptors_streamer_2eproto, file_level_service_descriptors_streamer_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_streamer_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_streamer_2eproto)), true);
namespace streamer {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RecorderInfo_RecorderState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_streamer_2eproto);
  return file_level_enum_descriptors_streamer_2eproto[0];
}
bool RecorderInfo_RecorderState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr RecorderInfo_RecorderState RecorderInfo::Monitoring;
constexpr RecorderInfo_RecorderState RecorderInfo::Recording;
constexpr RecorderInfo_RecorderState RecorderInfo::Inactive;
constexpr RecorderInfo_RecorderState RecorderInfo::Active;
constexpr RecorderInfo_RecorderState RecorderInfo::RecorderState_MIN;
constexpr RecorderInfo_RecorderState RecorderInfo::RecorderState_MAX;
constexpr int RecorderInfo::RecorderState_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SignalInfo_SignalType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_streamer_2eproto);
  return file_level_enum_descriptors_streamer_2eproto[1];
}
bool SignalInfo_SignalType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr SignalInfo_SignalType SignalInfo::Normal;
constexpr SignalInfo_SignalType SignalInfo::Emergency;
constexpr SignalInfo_SignalType SignalInfo::EmergencyAck;
constexpr SignalInfo_SignalType SignalInfo::RadioCheck;
constexpr SignalInfo_SignalType SignalInfo::RadioCheckAck;
constexpr SignalInfo_SignalType SignalInfo::RadioStun;
constexpr SignalInfo_SignalType SignalInfo::RadioStunAck;
constexpr SignalInfo_SignalType SignalInfo::RadioRevive;
constexpr SignalInfo_SignalType SignalInfo::RadioReviveAck;
constexpr SignalInfo_SignalType SignalInfo::NormalPre;
constexpr SignalInfo_SignalType SignalInfo::EmergencyPre;
constexpr SignalInfo_SignalType SignalInfo::SignalType_MIN;
constexpr SignalInfo_SignalType SignalInfo::SignalType_MAX;
constexpr int SignalInfo::SignalType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void AudioSample::InitAsDefaultInstance() {
  ::streamer::_AudioSample_default_instance_._instance.get_mutable()->sample_time_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
}
class AudioSample::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Timestamp& sample_time(const AudioSample* msg);
};

const PROTOBUF_NAMESPACE_ID::Timestamp&
AudioSample::_Internal::sample_time(const AudioSample* msg) {
  return *msg->sample_time_;
}
void AudioSample::clear_sample_time() {
  if (GetArena() == nullptr && sample_time_ != nullptr) {
    delete sample_time_;
  }
  sample_time_ = nullptr;
}
AudioSample::AudioSample(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:streamer.AudioSample)
}
AudioSample::AudioSample(const AudioSample& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  sample_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sample().empty()) {
    sample_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_sample(),
      GetArena());
  }
  if (from._internal_has_sample_time()) {
    sample_time_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.sample_time_);
  } else {
    sample_time_ = nullptr;
  }
  recorder_num_ = from.recorder_num_;
  // @@protoc_insertion_point(copy_constructor:streamer.AudioSample)
}

void AudioSample::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AudioSample_streamer_2eproto.base);
  sample_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&sample_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&recorder_num_) -
      reinterpret_cast<char*>(&sample_time_)) + sizeof(recorder_num_));
}

AudioSample::~AudioSample() {
  // @@protoc_insertion_point(destructor:streamer.AudioSample)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AudioSample::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  sample_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete sample_time_;
}

void AudioSample::ArenaDtor(void* object) {
  AudioSample* _this = reinterpret_cast< AudioSample* >(object);
  (void)_this;
}
void AudioSample::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AudioSample::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AudioSample& AudioSample::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AudioSample_streamer_2eproto.base);
  return *internal_default_instance();
}


void AudioSample::Clear() {
// @@protoc_insertion_point(message_clear_start:streamer.AudioSample)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sample_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && sample_time_ != nullptr) {
    delete sample_time_;
  }
  sample_time_ = nullptr;
  recorder_num_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AudioSample::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .google.protobuf.Timestamp sample_time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_sample_time(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 recorder_num = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          recorder_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes sample = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_sample();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AudioSample::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:streamer.AudioSample)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Timestamp sample_time = 1;
  if (this->has_sample_time()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::sample_time(this), target, stream);
  }

  // int32 recorder_num = 2;
  if (this->recorder_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_recorder_num(), target);
  }

  // bytes sample = 3;
  if (this->sample().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_sample(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:streamer.AudioSample)
  return target;
}

size_t AudioSample::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:streamer.AudioSample)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes sample = 3;
  if (this->sample().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_sample());
  }

  // .google.protobuf.Timestamp sample_time = 1;
  if (this->has_sample_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sample_time_);
  }

  // int32 recorder_num = 2;
  if (this->recorder_num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_recorder_num());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AudioSample::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:streamer.AudioSample)
  GOOGLE_DCHECK_NE(&from, this);
  const AudioSample* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AudioSample>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:streamer.AudioSample)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:streamer.AudioSample)
    MergeFrom(*source);
  }
}

void AudioSample::MergeFrom(const AudioSample& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:streamer.AudioSample)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.sample().size() > 0) {
    _internal_set_sample(from._internal_sample());
  }
  if (from.has_sample_time()) {
    _internal_mutable_sample_time()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_sample_time());
  }
  if (from.recorder_num() != 0) {
    _internal_set_recorder_num(from._internal_recorder_num());
  }
}

void AudioSample::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:streamer.AudioSample)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AudioSample::CopyFrom(const AudioSample& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:streamer.AudioSample)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AudioSample::IsInitialized() const {
  return true;
}

void AudioSample::InternalSwap(AudioSample* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  sample_.Swap(&other->sample_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AudioSample, recorder_num_)
      + sizeof(AudioSample::recorder_num_)
      - PROTOBUF_FIELD_OFFSET(AudioSample, sample_time_)>(
          reinterpret_cast<char*>(&sample_time_),
          reinterpret_cast<char*>(&other->sample_time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AudioSample::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RecorderInfo::InitAsDefaultInstance() {
}
class RecorderInfo::_Internal {
 public:
};

RecorderInfo::RecorderInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:streamer.RecorderInfo)
}
RecorderInfo::RecorderInfo(const RecorderInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  recorder_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_recorder_type().empty()) {
    recorder_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_recorder_type(),
      GetArena());
  }
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_id(),
      GetArena());
  }
  ::memcpy(&recorder_num_, &from.recorder_num_,
    static_cast<size_t>(reinterpret_cast<char*>(&status_spike_) -
    reinterpret_cast<char*>(&recorder_num_)) + sizeof(status_spike_));
  // @@protoc_insertion_point(copy_constructor:streamer.RecorderInfo)
}

void RecorderInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RecorderInfo_streamer_2eproto.base);
  recorder_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&recorder_num_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_spike_) -
      reinterpret_cast<char*>(&recorder_num_)) + sizeof(status_spike_));
}

RecorderInfo::~RecorderInfo() {
  // @@protoc_insertion_point(destructor:streamer.RecorderInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RecorderInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  recorder_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RecorderInfo::ArenaDtor(void* object) {
  RecorderInfo* _this = reinterpret_cast< RecorderInfo* >(object);
  (void)_this;
}
void RecorderInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RecorderInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RecorderInfo& RecorderInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RecorderInfo_streamer_2eproto.base);
  return *internal_default_instance();
}


void RecorderInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:streamer.RecorderInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  recorder_type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&recorder_num_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_spike_) -
      reinterpret_cast<char*>(&recorder_num_)) + sizeof(status_spike_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RecorderInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 recorder_num = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          recorder_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string recorder_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_recorder_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "streamer.RecorderInfo.recorder_type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 source_num = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          source_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "streamer.RecorderInfo.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 recorder_count = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          recorder_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double recorder_duration = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          recorder_duration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // .streamer.RecorderInfo.RecorderState recorder_state = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_recorder_state(static_cast<::streamer::RecorderInfo_RecorderState>(val));
        } else goto handle_unusual;
        continue;
      // double status_len = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          status_len_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double status_error = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          status_error_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double status_spike = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          status_spike_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RecorderInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:streamer.RecorderInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 recorder_num = 1;
  if (this->recorder_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_recorder_num(), target);
  }

  // string recorder_type = 2;
  if (this->recorder_type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_recorder_type().data(), static_cast<int>(this->_internal_recorder_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "streamer.RecorderInfo.recorder_type");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_recorder_type(), target);
  }

  // int32 source_num = 3;
  if (this->source_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_source_num(), target);
  }

  // string id = 4;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "streamer.RecorderInfo.id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_id(), target);
  }

  // int32 recorder_count = 5;
  if (this->recorder_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_recorder_count(), target);
  }

  // double recorder_duration = 6;
  if (!(this->recorder_duration() <= 0 && this->recorder_duration() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_recorder_duration(), target);
  }

  // .streamer.RecorderInfo.RecorderState recorder_state = 7;
  if (this->recorder_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      7, this->_internal_recorder_state(), target);
  }

  // double status_len = 8;
  if (!(this->status_len() <= 0 && this->status_len() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_status_len(), target);
  }

  // double status_error = 9;
  if (!(this->status_error() <= 0 && this->status_error() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->_internal_status_error(), target);
  }

  // double status_spike = 10;
  if (!(this->status_spike() <= 0 && this->status_spike() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(10, this->_internal_status_spike(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:streamer.RecorderInfo)
  return target;
}

size_t RecorderInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:streamer.RecorderInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string recorder_type = 2;
  if (this->recorder_type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_recorder_type());
  }

  // string id = 4;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // int32 recorder_num = 1;
  if (this->recorder_num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_recorder_num());
  }

  // int32 source_num = 3;
  if (this->source_num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_source_num());
  }

  // double recorder_duration = 6;
  if (!(this->recorder_duration() <= 0 && this->recorder_duration() >= 0)) {
    total_size += 1 + 8;
  }

  // int32 recorder_count = 5;
  if (this->recorder_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_recorder_count());
  }

  // .streamer.RecorderInfo.RecorderState recorder_state = 7;
  if (this->recorder_state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_recorder_state());
  }

  // double status_len = 8;
  if (!(this->status_len() <= 0 && this->status_len() >= 0)) {
    total_size += 1 + 8;
  }

  // double status_error = 9;
  if (!(this->status_error() <= 0 && this->status_error() >= 0)) {
    total_size += 1 + 8;
  }

  // double status_spike = 10;
  if (!(this->status_spike() <= 0 && this->status_spike() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RecorderInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:streamer.RecorderInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const RecorderInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RecorderInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:streamer.RecorderInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:streamer.RecorderInfo)
    MergeFrom(*source);
  }
}

void RecorderInfo::MergeFrom(const RecorderInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:streamer.RecorderInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.recorder_type().size() > 0) {
    _internal_set_recorder_type(from._internal_recorder_type());
  }
  if (from.id().size() > 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.recorder_num() != 0) {
    _internal_set_recorder_num(from._internal_recorder_num());
  }
  if (from.source_num() != 0) {
    _internal_set_source_num(from._internal_source_num());
  }
  if (!(from.recorder_duration() <= 0 && from.recorder_duration() >= 0)) {
    _internal_set_recorder_duration(from._internal_recorder_duration());
  }
  if (from.recorder_count() != 0) {
    _internal_set_recorder_count(from._internal_recorder_count());
  }
  if (from.recorder_state() != 0) {
    _internal_set_recorder_state(from._internal_recorder_state());
  }
  if (!(from.status_len() <= 0 && from.status_len() >= 0)) {
    _internal_set_status_len(from._internal_status_len());
  }
  if (!(from.status_error() <= 0 && from.status_error() >= 0)) {
    _internal_set_status_error(from._internal_status_error());
  }
  if (!(from.status_spike() <= 0 && from.status_spike() >= 0)) {
    _internal_set_status_spike(from._internal_status_spike());
  }
}

void RecorderInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:streamer.RecorderInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecorderInfo::CopyFrom(const RecorderInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:streamer.RecorderInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecorderInfo::IsInitialized() const {
  return true;
}

void RecorderInfo::InternalSwap(RecorderInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  recorder_type_.Swap(&other->recorder_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RecorderInfo, status_spike_)
      + sizeof(RecorderInfo::status_spike_)
      - PROTOBUF_FIELD_OFFSET(RecorderInfo, recorder_num_)>(
          reinterpret_cast<char*>(&recorder_num_),
          reinterpret_cast<char*>(&other->recorder_num_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RecorderInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SourceInfo::InitAsDefaultInstance() {
}
class SourceInfo::_Internal {
 public:
};

SourceInfo::SourceInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:streamer.SourceInfo)
}
SourceInfo::SourceInfo(const SourceInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  driver_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_driver().empty()) {
    driver_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_driver(),
      GetArena());
  }
  device_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_device().empty()) {
    device_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_device(),
      GetArena());
  }
  antenna_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_antenna().empty()) {
    antenna_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_antenna(),
      GetArena());
  }
  ::memcpy(&min_hz_, &from.min_hz_,
    static_cast<size_t>(reinterpret_cast<char*>(&sigmf_recorders_) -
    reinterpret_cast<char*>(&min_hz_)) + sizeof(sigmf_recorders_));
  // @@protoc_insertion_point(copy_constructor:streamer.SourceInfo)
}

void SourceInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SourceInfo_streamer_2eproto.base);
  driver_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  device_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  antenna_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&min_hz_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sigmf_recorders_) -
      reinterpret_cast<char*>(&min_hz_)) + sizeof(sigmf_recorders_));
}

SourceInfo::~SourceInfo() {
  // @@protoc_insertion_point(destructor:streamer.SourceInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SourceInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  driver_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  device_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  antenna_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SourceInfo::ArenaDtor(void* object) {
  SourceInfo* _this = reinterpret_cast< SourceInfo* >(object);
  (void)_this;
}
void SourceInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SourceInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SourceInfo& SourceInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SourceInfo_streamer_2eproto.base);
  return *internal_default_instance();
}


void SourceInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:streamer.SourceInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  driver_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  device_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  antenna_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&min_hz_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sigmf_recorders_) -
      reinterpret_cast<char*>(&min_hz_)) + sizeof(sigmf_recorders_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SourceInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 source_num = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          source_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double min_hz = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          min_hz_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double max_hz = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          max_hz_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double center_hz = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          center_hz_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double rate = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // string driver = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_driver();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "streamer.SourceInfo.driver"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string device = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_device();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "streamer.SourceInfo.device"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string antenna = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_antenna();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "streamer.SourceInfo.antenna"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double error = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          error_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // int32 mix_gain = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          mix_gain_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 lna_gain = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          lna_gain_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 vga1_gain = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          vga1_gain_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 vga2_gain = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          vga2_gain_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 bb_gain = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          bb_gain_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 gain = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          gain_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 if_gain = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          if_gain_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 analog_recorders = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          analog_recorders_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 digital_recorders = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          digital_recorders_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 debug_recorders = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          debug_recorders_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 sigmf_recorders = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          sigmf_recorders_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SourceInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:streamer.SourceInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 source_num = 1;
  if (this->source_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_source_num(), target);
  }

  // double min_hz = 2;
  if (!(this->min_hz() <= 0 && this->min_hz() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_min_hz(), target);
  }

  // double max_hz = 3;
  if (!(this->max_hz() <= 0 && this->max_hz() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_max_hz(), target);
  }

  // double center_hz = 4;
  if (!(this->center_hz() <= 0 && this->center_hz() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_center_hz(), target);
  }

  // double rate = 5;
  if (!(this->rate() <= 0 && this->rate() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_rate(), target);
  }

  // string driver = 6;
  if (this->driver().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_driver().data(), static_cast<int>(this->_internal_driver().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "streamer.SourceInfo.driver");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_driver(), target);
  }

  // string device = 7;
  if (this->device().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_device().data(), static_cast<int>(this->_internal_device().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "streamer.SourceInfo.device");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_device(), target);
  }

  // string antenna = 8;
  if (this->antenna().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_antenna().data(), static_cast<int>(this->_internal_antenna().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "streamer.SourceInfo.antenna");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_antenna(), target);
  }

  // double error = 9;
  if (!(this->error() <= 0 && this->error() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->_internal_error(), target);
  }

  // int32 mix_gain = 10;
  if (this->mix_gain() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_mix_gain(), target);
  }

  // int32 lna_gain = 11;
  if (this->lna_gain() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->_internal_lna_gain(), target);
  }

  // int32 vga1_gain = 12;
  if (this->vga1_gain() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12, this->_internal_vga1_gain(), target);
  }

  // int32 vga2_gain = 13;
  if (this->vga2_gain() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(13, this->_internal_vga2_gain(), target);
  }

  // int32 bb_gain = 14;
  if (this->bb_gain() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(14, this->_internal_bb_gain(), target);
  }

  // int32 gain = 15;
  if (this->gain() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(15, this->_internal_gain(), target);
  }

  // int32 if_gain = 16;
  if (this->if_gain() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(16, this->_internal_if_gain(), target);
  }

  // int32 analog_recorders = 17;
  if (this->analog_recorders() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(17, this->_internal_analog_recorders(), target);
  }

  // int32 digital_recorders = 18;
  if (this->digital_recorders() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(18, this->_internal_digital_recorders(), target);
  }

  // int32 debug_recorders = 19;
  if (this->debug_recorders() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(19, this->_internal_debug_recorders(), target);
  }

  // int32 sigmf_recorders = 20;
  if (this->sigmf_recorders() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(20, this->_internal_sigmf_recorders(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:streamer.SourceInfo)
  return target;
}

size_t SourceInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:streamer.SourceInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string driver = 6;
  if (this->driver().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_driver());
  }

  // string device = 7;
  if (this->device().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_device());
  }

  // string antenna = 8;
  if (this->antenna().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_antenna());
  }

  // double min_hz = 2;
  if (!(this->min_hz() <= 0 && this->min_hz() >= 0)) {
    total_size += 1 + 8;
  }

  // double max_hz = 3;
  if (!(this->max_hz() <= 0 && this->max_hz() >= 0)) {
    total_size += 1 + 8;
  }

  // double center_hz = 4;
  if (!(this->center_hz() <= 0 && this->center_hz() >= 0)) {
    total_size += 1 + 8;
  }

  // double rate = 5;
  if (!(this->rate() <= 0 && this->rate() >= 0)) {
    total_size += 1 + 8;
  }

  // int32 source_num = 1;
  if (this->source_num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_source_num());
  }

  // int32 mix_gain = 10;
  if (this->mix_gain() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_mix_gain());
  }

  // double error = 9;
  if (!(this->error() <= 0 && this->error() >= 0)) {
    total_size += 1 + 8;
  }

  // int32 lna_gain = 11;
  if (this->lna_gain() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_lna_gain());
  }

  // int32 vga1_gain = 12;
  if (this->vga1_gain() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_vga1_gain());
  }

  // int32 vga2_gain = 13;
  if (this->vga2_gain() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_vga2_gain());
  }

  // int32 bb_gain = 14;
  if (this->bb_gain() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_bb_gain());
  }

  // int32 gain = 15;
  if (this->gain() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_gain());
  }

  // int32 if_gain = 16;
  if (this->if_gain() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_if_gain());
  }

  // int32 analog_recorders = 17;
  if (this->analog_recorders() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_analog_recorders());
  }

  // int32 digital_recorders = 18;
  if (this->digital_recorders() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_digital_recorders());
  }

  // int32 debug_recorders = 19;
  if (this->debug_recorders() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_debug_recorders());
  }

  // int32 sigmf_recorders = 20;
  if (this->sigmf_recorders() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_sigmf_recorders());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SourceInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:streamer.SourceInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SourceInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SourceInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:streamer.SourceInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:streamer.SourceInfo)
    MergeFrom(*source);
  }
}

void SourceInfo::MergeFrom(const SourceInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:streamer.SourceInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.driver().size() > 0) {
    _internal_set_driver(from._internal_driver());
  }
  if (from.device().size() > 0) {
    _internal_set_device(from._internal_device());
  }
  if (from.antenna().size() > 0) {
    _internal_set_antenna(from._internal_antenna());
  }
  if (!(from.min_hz() <= 0 && from.min_hz() >= 0)) {
    _internal_set_min_hz(from._internal_min_hz());
  }
  if (!(from.max_hz() <= 0 && from.max_hz() >= 0)) {
    _internal_set_max_hz(from._internal_max_hz());
  }
  if (!(from.center_hz() <= 0 && from.center_hz() >= 0)) {
    _internal_set_center_hz(from._internal_center_hz());
  }
  if (!(from.rate() <= 0 && from.rate() >= 0)) {
    _internal_set_rate(from._internal_rate());
  }
  if (from.source_num() != 0) {
    _internal_set_source_num(from._internal_source_num());
  }
  if (from.mix_gain() != 0) {
    _internal_set_mix_gain(from._internal_mix_gain());
  }
  if (!(from.error() <= 0 && from.error() >= 0)) {
    _internal_set_error(from._internal_error());
  }
  if (from.lna_gain() != 0) {
    _internal_set_lna_gain(from._internal_lna_gain());
  }
  if (from.vga1_gain() != 0) {
    _internal_set_vga1_gain(from._internal_vga1_gain());
  }
  if (from.vga2_gain() != 0) {
    _internal_set_vga2_gain(from._internal_vga2_gain());
  }
  if (from.bb_gain() != 0) {
    _internal_set_bb_gain(from._internal_bb_gain());
  }
  if (from.gain() != 0) {
    _internal_set_gain(from._internal_gain());
  }
  if (from.if_gain() != 0) {
    _internal_set_if_gain(from._internal_if_gain());
  }
  if (from.analog_recorders() != 0) {
    _internal_set_analog_recorders(from._internal_analog_recorders());
  }
  if (from.digital_recorders() != 0) {
    _internal_set_digital_recorders(from._internal_digital_recorders());
  }
  if (from.debug_recorders() != 0) {
    _internal_set_debug_recorders(from._internal_debug_recorders());
  }
  if (from.sigmf_recorders() != 0) {
    _internal_set_sigmf_recorders(from._internal_sigmf_recorders());
  }
}

void SourceInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:streamer.SourceInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SourceInfo::CopyFrom(const SourceInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:streamer.SourceInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SourceInfo::IsInitialized() const {
  return true;
}

void SourceInfo::InternalSwap(SourceInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  driver_.Swap(&other->driver_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  device_.Swap(&other->device_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  antenna_.Swap(&other->antenna_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SourceInfo, sigmf_recorders_)
      + sizeof(SourceInfo::sigmf_recorders_)
      - PROTOBUF_FIELD_OFFSET(SourceInfo, min_hz_)>(
          reinterpret_cast<char*>(&min_hz_),
          reinterpret_cast<char*>(&other->min_hz_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SourceInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SystemInfo::InitAsDefaultInstance() {
}
class SystemInfo::_Internal {
 public:
};

SystemInfo::SystemInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  channels_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:streamer.SystemInfo)
}
SystemInfo::SystemInfo(const SystemInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      channels_(from.channels_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  system_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_system_type().empty()) {
    system_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_system_type(),
      GetArena());
  }
  system_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_system_name().empty()) {
    system_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_system_name(),
      GetArena());
  }
  upload_script_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_upload_script().empty()) {
    upload_script_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_upload_script(),
      GetArena());
  }
  talkgroups_file_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_talkgroups_file().empty()) {
    talkgroups_file_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_talkgroups_file(),
      GetArena());
  }
  bandplan_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_bandplan().empty()) {
    bandplan_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_bandplan(),
      GetArena());
  }
  ::memcpy(&system_num_, &from.system_num_,
    static_cast<size_t>(reinterpret_cast<char*>(&bandplan_spacing_) -
    reinterpret_cast<char*>(&system_num_)) + sizeof(bandplan_spacing_));
  // @@protoc_insertion_point(copy_constructor:streamer.SystemInfo)
}

void SystemInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SystemInfo_streamer_2eproto.base);
  system_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  system_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  upload_script_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  talkgroups_file_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  bandplan_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&system_num_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bandplan_spacing_) -
      reinterpret_cast<char*>(&system_num_)) + sizeof(bandplan_spacing_));
}

SystemInfo::~SystemInfo() {
  // @@protoc_insertion_point(destructor:streamer.SystemInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SystemInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  system_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  system_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  upload_script_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  talkgroups_file_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  bandplan_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SystemInfo::ArenaDtor(void* object) {
  SystemInfo* _this = reinterpret_cast< SystemInfo* >(object);
  (void)_this;
}
void SystemInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SystemInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SystemInfo& SystemInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SystemInfo_streamer_2eproto.base);
  return *internal_default_instance();
}


void SystemInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:streamer.SystemInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  channels_.Clear();
  system_type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  system_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  upload_script_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  talkgroups_file_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  bandplan_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&system_num_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bandplan_spacing_) -
      reinterpret_cast<char*>(&system_num_)) + sizeof(bandplan_spacing_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SystemInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 system_num = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          system_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string system_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_system_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "streamer.SystemInfo.system_type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string system_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_system_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "streamer.SystemInfo.system_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool audio_archive = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          audio_archive_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string upload_script = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_upload_script();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "streamer.SystemInfo.upload_script"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool record_unknown = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          record_unknown_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool call_log = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          call_log_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string talkgroups_file = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_talkgroups_file();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "streamer.SystemInfo.talkgroups_file"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double analog_levels = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          analog_levels_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double digital_levels = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          digital_levels_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // bool qpsk = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          qpsk_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double squelch_db = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 97)) {
          squelch_db_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated double channels = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_channels(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 105) {
          _internal_add_channels(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // string bandplan = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          auto str = _internal_mutable_bandplan();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "streamer.SystemInfo.bandplan"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 bandfreq = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          bandfreq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double bandplan_base = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 129)) {
          bandplan_base_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double bandplan_high = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 137)) {
          bandplan_high_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double bandplan_spacing = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 145)) {
          bandplan_spacing_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // int32 bandplan_offset = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          bandplan_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SystemInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:streamer.SystemInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 system_num = 1;
  if (this->system_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_system_num(), target);
  }

  // string system_type = 2;
  if (this->system_type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_system_type().data(), static_cast<int>(this->_internal_system_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "streamer.SystemInfo.system_type");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_system_type(), target);
  }

  // string system_name = 3;
  if (this->system_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_system_name().data(), static_cast<int>(this->_internal_system_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "streamer.SystemInfo.system_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_system_name(), target);
  }

  // bool audio_archive = 4;
  if (this->audio_archive() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_audio_archive(), target);
  }

  // string upload_script = 5;
  if (this->upload_script().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_upload_script().data(), static_cast<int>(this->_internal_upload_script().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "streamer.SystemInfo.upload_script");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_upload_script(), target);
  }

  // bool record_unknown = 6;
  if (this->record_unknown() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_record_unknown(), target);
  }

  // bool call_log = 7;
  if (this->call_log() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_call_log(), target);
  }

  // string talkgroups_file = 8;
  if (this->talkgroups_file().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_talkgroups_file().data(), static_cast<int>(this->_internal_talkgroups_file().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "streamer.SystemInfo.talkgroups_file");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_talkgroups_file(), target);
  }

  // double analog_levels = 9;
  if (!(this->analog_levels() <= 0 && this->analog_levels() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->_internal_analog_levels(), target);
  }

  // double digital_levels = 10;
  if (!(this->digital_levels() <= 0 && this->digital_levels() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(10, this->_internal_digital_levels(), target);
  }

  // bool qpsk = 11;
  if (this->qpsk() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->_internal_qpsk(), target);
  }

  // double squelch_db = 12;
  if (!(this->squelch_db() <= 0 && this->squelch_db() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(12, this->_internal_squelch_db(), target);
  }

  // repeated double channels = 13;
  if (this->_internal_channels_size() > 0) {
    target = stream->WriteFixedPacked(13, _internal_channels(), target);
  }

  // string bandplan = 14;
  if (this->bandplan().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_bandplan().data(), static_cast<int>(this->_internal_bandplan().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "streamer.SystemInfo.bandplan");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_bandplan(), target);
  }

  // int32 bandfreq = 15;
  if (this->bandfreq() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(15, this->_internal_bandfreq(), target);
  }

  // double bandplan_base = 16;
  if (!(this->bandplan_base() <= 0 && this->bandplan_base() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(16, this->_internal_bandplan_base(), target);
  }

  // double bandplan_high = 17;
  if (!(this->bandplan_high() <= 0 && this->bandplan_high() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(17, this->_internal_bandplan_high(), target);
  }

  // double bandplan_spacing = 18;
  if (!(this->bandplan_spacing() <= 0 && this->bandplan_spacing() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(18, this->_internal_bandplan_spacing(), target);
  }

  // int32 bandplan_offset = 19;
  if (this->bandplan_offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(19, this->_internal_bandplan_offset(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:streamer.SystemInfo)
  return target;
}

size_t SystemInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:streamer.SystemInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double channels = 13;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_channels_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _channels_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string system_type = 2;
  if (this->system_type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_system_type());
  }

  // string system_name = 3;
  if (this->system_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_system_name());
  }

  // string upload_script = 5;
  if (this->upload_script().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_upload_script());
  }

  // string talkgroups_file = 8;
  if (this->talkgroups_file().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_talkgroups_file());
  }

  // string bandplan = 14;
  if (this->bandplan().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_bandplan());
  }

  // int32 system_num = 1;
  if (this->system_num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_system_num());
  }

  // bool audio_archive = 4;
  if (this->audio_archive() != 0) {
    total_size += 1 + 1;
  }

  // bool record_unknown = 6;
  if (this->record_unknown() != 0) {
    total_size += 1 + 1;
  }

  // bool call_log = 7;
  if (this->call_log() != 0) {
    total_size += 1 + 1;
  }

  // bool qpsk = 11;
  if (this->qpsk() != 0) {
    total_size += 1 + 1;
  }

  // double analog_levels = 9;
  if (!(this->analog_levels() <= 0 && this->analog_levels() >= 0)) {
    total_size += 1 + 8;
  }

  // double digital_levels = 10;
  if (!(this->digital_levels() <= 0 && this->digital_levels() >= 0)) {
    total_size += 1 + 8;
  }

  // double squelch_db = 12;
  if (!(this->squelch_db() <= 0 && this->squelch_db() >= 0)) {
    total_size += 1 + 8;
  }

  // double bandplan_base = 16;
  if (!(this->bandplan_base() <= 0 && this->bandplan_base() >= 0)) {
    total_size += 2 + 8;
  }

  // double bandplan_high = 17;
  if (!(this->bandplan_high() <= 0 && this->bandplan_high() >= 0)) {
    total_size += 2 + 8;
  }

  // int32 bandfreq = 15;
  if (this->bandfreq() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_bandfreq());
  }

  // int32 bandplan_offset = 19;
  if (this->bandplan_offset() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_bandplan_offset());
  }

  // double bandplan_spacing = 18;
  if (!(this->bandplan_spacing() <= 0 && this->bandplan_spacing() >= 0)) {
    total_size += 2 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SystemInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:streamer.SystemInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SystemInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SystemInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:streamer.SystemInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:streamer.SystemInfo)
    MergeFrom(*source);
  }
}

void SystemInfo::MergeFrom(const SystemInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:streamer.SystemInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  channels_.MergeFrom(from.channels_);
  if (from.system_type().size() > 0) {
    _internal_set_system_type(from._internal_system_type());
  }
  if (from.system_name().size() > 0) {
    _internal_set_system_name(from._internal_system_name());
  }
  if (from.upload_script().size() > 0) {
    _internal_set_upload_script(from._internal_upload_script());
  }
  if (from.talkgroups_file().size() > 0) {
    _internal_set_talkgroups_file(from._internal_talkgroups_file());
  }
  if (from.bandplan().size() > 0) {
    _internal_set_bandplan(from._internal_bandplan());
  }
  if (from.system_num() != 0) {
    _internal_set_system_num(from._internal_system_num());
  }
  if (from.audio_archive() != 0) {
    _internal_set_audio_archive(from._internal_audio_archive());
  }
  if (from.record_unknown() != 0) {
    _internal_set_record_unknown(from._internal_record_unknown());
  }
  if (from.call_log() != 0) {
    _internal_set_call_log(from._internal_call_log());
  }
  if (from.qpsk() != 0) {
    _internal_set_qpsk(from._internal_qpsk());
  }
  if (!(from.analog_levels() <= 0 && from.analog_levels() >= 0)) {
    _internal_set_analog_levels(from._internal_analog_levels());
  }
  if (!(from.digital_levels() <= 0 && from.digital_levels() >= 0)) {
    _internal_set_digital_levels(from._internal_digital_levels());
  }
  if (!(from.squelch_db() <= 0 && from.squelch_db() >= 0)) {
    _internal_set_squelch_db(from._internal_squelch_db());
  }
  if (!(from.bandplan_base() <= 0 && from.bandplan_base() >= 0)) {
    _internal_set_bandplan_base(from._internal_bandplan_base());
  }
  if (!(from.bandplan_high() <= 0 && from.bandplan_high() >= 0)) {
    _internal_set_bandplan_high(from._internal_bandplan_high());
  }
  if (from.bandfreq() != 0) {
    _internal_set_bandfreq(from._internal_bandfreq());
  }
  if (from.bandplan_offset() != 0) {
    _internal_set_bandplan_offset(from._internal_bandplan_offset());
  }
  if (!(from.bandplan_spacing() <= 0 && from.bandplan_spacing() >= 0)) {
    _internal_set_bandplan_spacing(from._internal_bandplan_spacing());
  }
}

void SystemInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:streamer.SystemInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SystemInfo::CopyFrom(const SystemInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:streamer.SystemInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SystemInfo::IsInitialized() const {
  return true;
}

void SystemInfo::InternalSwap(SystemInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  channels_.InternalSwap(&other->channels_);
  system_type_.Swap(&other->system_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  system_name_.Swap(&other->system_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  upload_script_.Swap(&other->upload_script_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  talkgroups_file_.Swap(&other->talkgroups_file_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  bandplan_.Swap(&other->bandplan_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SystemInfo, bandplan_spacing_)
      + sizeof(SystemInfo::bandplan_spacing_)
      - PROTOBUF_FIELD_OFFSET(SystemInfo, system_num_)>(
          reinterpret_cast<char*>(&system_num_),
          reinterpret_cast<char*>(&other->system_num_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SystemInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ConfigInfo::InitAsDefaultInstance() {
}
class ConfigInfo::_Internal {
 public:
};

ConfigInfo::ConfigInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  sources_(arena),
  systems_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:streamer.ConfigInfo)
}
ConfigInfo::ConfigInfo(const ConfigInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      sources_(from.sources_),
      systems_(from.systems_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  capture_dir_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_capture_dir().empty()) {
    capture_dir_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_capture_dir(),
      GetArena());
  }
  upload_server_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_upload_server().empty()) {
    upload_server_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_upload_server(),
      GetArena());
  }
  instance_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_instance_id().empty()) {
    instance_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_instance_id(),
      GetArena());
  }
  instance_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_instance_key().empty()) {
    instance_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_instance_key(),
      GetArena());
  }
  ::memcpy(&call_timeout_, &from.call_timeout_,
    static_cast<size_t>(reinterpret_cast<char*>(&broadcast_signals_) -
    reinterpret_cast<char*>(&call_timeout_)) + sizeof(broadcast_signals_));
  // @@protoc_insertion_point(copy_constructor:streamer.ConfigInfo)
}

void ConfigInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ConfigInfo_streamer_2eproto.base);
  capture_dir_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  upload_server_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  instance_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  instance_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&call_timeout_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&broadcast_signals_) -
      reinterpret_cast<char*>(&call_timeout_)) + sizeof(broadcast_signals_));
}

ConfigInfo::~ConfigInfo() {
  // @@protoc_insertion_point(destructor:streamer.ConfigInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ConfigInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  capture_dir_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  upload_server_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  instance_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  instance_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ConfigInfo::ArenaDtor(void* object) {
  ConfigInfo* _this = reinterpret_cast< ConfigInfo* >(object);
  (void)_this;
}
void ConfigInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ConfigInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ConfigInfo& ConfigInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ConfigInfo_streamer_2eproto.base);
  return *internal_default_instance();
}


void ConfigInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:streamer.ConfigInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sources_.Clear();
  systems_.Clear();
  capture_dir_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  upload_server_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  instance_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  instance_key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&call_timeout_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&broadcast_signals_) -
      reinterpret_cast<char*>(&call_timeout_)) + sizeof(broadcast_signals_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConfigInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .streamer.SourceInfo sources = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_sources(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .streamer.SystemInfo systems = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_systems(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // string capture_dir = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_capture_dir();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "streamer.ConfigInfo.capture_dir"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string upload_server = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_upload_server();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "streamer.ConfigInfo.upload_server"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 call_timeout = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          call_timeout_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool log_file = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          log_file_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string instance_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_instance_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "streamer.ConfigInfo.instance_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string instance_key = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_instance_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "streamer.ConfigInfo.instance_key"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool broadcast_signals = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          broadcast_signals_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ConfigInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:streamer.ConfigInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .streamer.SourceInfo sources = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_sources_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_sources(i), target, stream);
  }

  // repeated .streamer.SystemInfo systems = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_systems_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_systems(i), target, stream);
  }

  // string capture_dir = 3;
  if (this->capture_dir().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_capture_dir().data(), static_cast<int>(this->_internal_capture_dir().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "streamer.ConfigInfo.capture_dir");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_capture_dir(), target);
  }

  // string upload_server = 4;
  if (this->upload_server().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_upload_server().data(), static_cast<int>(this->_internal_upload_server().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "streamer.ConfigInfo.upload_server");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_upload_server(), target);
  }

  // int32 call_timeout = 5;
  if (this->call_timeout() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_call_timeout(), target);
  }

  // bool log_file = 6;
  if (this->log_file() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_log_file(), target);
  }

  // string instance_id = 7;
  if (this->instance_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_instance_id().data(), static_cast<int>(this->_internal_instance_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "streamer.ConfigInfo.instance_id");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_instance_id(), target);
  }

  // string instance_key = 8;
  if (this->instance_key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_instance_key().data(), static_cast<int>(this->_internal_instance_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "streamer.ConfigInfo.instance_key");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_instance_key(), target);
  }

  // bool broadcast_signals = 9;
  if (this->broadcast_signals() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_broadcast_signals(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:streamer.ConfigInfo)
  return target;
}

size_t ConfigInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:streamer.ConfigInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .streamer.SourceInfo sources = 1;
  total_size += 1UL * this->_internal_sources_size();
  for (const auto& msg : this->sources_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .streamer.SystemInfo systems = 2;
  total_size += 1UL * this->_internal_systems_size();
  for (const auto& msg : this->systems_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string capture_dir = 3;
  if (this->capture_dir().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_capture_dir());
  }

  // string upload_server = 4;
  if (this->upload_server().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_upload_server());
  }

  // string instance_id = 7;
  if (this->instance_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_instance_id());
  }

  // string instance_key = 8;
  if (this->instance_key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_instance_key());
  }

  // int32 call_timeout = 5;
  if (this->call_timeout() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_call_timeout());
  }

  // bool log_file = 6;
  if (this->log_file() != 0) {
    total_size += 1 + 1;
  }

  // bool broadcast_signals = 9;
  if (this->broadcast_signals() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConfigInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:streamer.ConfigInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ConfigInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ConfigInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:streamer.ConfigInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:streamer.ConfigInfo)
    MergeFrom(*source);
  }
}

void ConfigInfo::MergeFrom(const ConfigInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:streamer.ConfigInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sources_.MergeFrom(from.sources_);
  systems_.MergeFrom(from.systems_);
  if (from.capture_dir().size() > 0) {
    _internal_set_capture_dir(from._internal_capture_dir());
  }
  if (from.upload_server().size() > 0) {
    _internal_set_upload_server(from._internal_upload_server());
  }
  if (from.instance_id().size() > 0) {
    _internal_set_instance_id(from._internal_instance_id());
  }
  if (from.instance_key().size() > 0) {
    _internal_set_instance_key(from._internal_instance_key());
  }
  if (from.call_timeout() != 0) {
    _internal_set_call_timeout(from._internal_call_timeout());
  }
  if (from.log_file() != 0) {
    _internal_set_log_file(from._internal_log_file());
  }
  if (from.broadcast_signals() != 0) {
    _internal_set_broadcast_signals(from._internal_broadcast_signals());
  }
}

void ConfigInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:streamer.ConfigInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfigInfo::CopyFrom(const ConfigInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:streamer.ConfigInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigInfo::IsInitialized() const {
  return true;
}

void ConfigInfo::InternalSwap(ConfigInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  sources_.InternalSwap(&other->sources_);
  systems_.InternalSwap(&other->systems_);
  capture_dir_.Swap(&other->capture_dir_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  upload_server_.Swap(&other->upload_server_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  instance_id_.Swap(&other->instance_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  instance_key_.Swap(&other->instance_key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ConfigInfo, broadcast_signals_)
      + sizeof(ConfigInfo::broadcast_signals_)
      - PROTOBUF_FIELD_OFFSET(ConfigInfo, call_timeout_)>(
          reinterpret_cast<char*>(&call_timeout_),
          reinterpret_cast<char*>(&other->call_timeout_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ConfigInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CallInfo::InitAsDefaultInstance() {
}
class CallInfo::_Internal {
 public:
};

CallInfo::CallInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:streamer.CallInfo)
}
CallInfo::CallInfo(const CallInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&call_active_, &from.call_active_,
    static_cast<size_t>(reinterpret_cast<char*>(&system_num_) -
    reinterpret_cast<char*>(&call_active_)) + sizeof(system_num_));
  // @@protoc_insertion_point(copy_constructor:streamer.CallInfo)
}

void CallInfo::SharedCtor() {
  ::memset(&call_active_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&system_num_) -
      reinterpret_cast<char*>(&call_active_)) + sizeof(system_num_));
}

CallInfo::~CallInfo() {
  // @@protoc_insertion_point(destructor:streamer.CallInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CallInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CallInfo::ArenaDtor(void* object) {
  CallInfo* _this = reinterpret_cast< CallInfo* >(object);
  (void)_this;
}
void CallInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CallInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CallInfo& CallInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CallInfo_streamer_2eproto.base);
  return *internal_default_instance();
}


void CallInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:streamer.CallInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&call_active_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&system_num_) -
      reinterpret_cast<char*>(&call_active_)) + sizeof(system_num_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CallInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool call_active = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          call_active_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 recorder_num = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          recorder_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 system_num = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          system_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double curr_freq = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          curr_freq_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CallInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:streamer.CallInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool call_active = 1;
  if (this->call_active() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_call_active(), target);
  }

  // int32 recorder_num = 2;
  if (this->recorder_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_recorder_num(), target);
  }

  // int32 system_num = 3;
  if (this->system_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_system_num(), target);
  }

  // double curr_freq = 4;
  if (!(this->curr_freq() <= 0 && this->curr_freq() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_curr_freq(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:streamer.CallInfo)
  return target;
}

size_t CallInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:streamer.CallInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool call_active = 1;
  if (this->call_active() != 0) {
    total_size += 1 + 1;
  }

  // int32 recorder_num = 2;
  if (this->recorder_num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_recorder_num());
  }

  // double curr_freq = 4;
  if (!(this->curr_freq() <= 0 && this->curr_freq() >= 0)) {
    total_size += 1 + 8;
  }

  // int32 system_num = 3;
  if (this->system_num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_system_num());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CallInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:streamer.CallInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CallInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CallInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:streamer.CallInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:streamer.CallInfo)
    MergeFrom(*source);
  }
}

void CallInfo::MergeFrom(const CallInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:streamer.CallInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.call_active() != 0) {
    _internal_set_call_active(from._internal_call_active());
  }
  if (from.recorder_num() != 0) {
    _internal_set_recorder_num(from._internal_recorder_num());
  }
  if (!(from.curr_freq() <= 0 && from.curr_freq() >= 0)) {
    _internal_set_curr_freq(from._internal_curr_freq());
  }
  if (from.system_num() != 0) {
    _internal_set_system_num(from._internal_system_num());
  }
}

void CallInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:streamer.CallInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CallInfo::CopyFrom(const CallInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:streamer.CallInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CallInfo::IsInitialized() const {
  return true;
}

void CallInfo::InternalSwap(CallInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CallInfo, system_num_)
      + sizeof(CallInfo::system_num_)
      - PROTOBUF_FIELD_OFFSET(CallInfo, call_active_)>(
          reinterpret_cast<char*>(&call_active_),
          reinterpret_cast<char*>(&other->call_active_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CallInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SignalInfo::InitAsDefaultInstance() {
  ::streamer::_SignalInfo_default_instance_._instance.get_mutable()->call_info_ = const_cast< ::streamer::CallInfo*>(
      ::streamer::CallInfo::internal_default_instance());
  ::streamer::_SignalInfo_default_instance_._instance.get_mutable()->system_info_ = const_cast< ::streamer::SystemInfo*>(
      ::streamer::SystemInfo::internal_default_instance());
  ::streamer::_SignalInfo_default_instance_._instance.get_mutable()->recorder_info_ = const_cast< ::streamer::RecorderInfo*>(
      ::streamer::RecorderInfo::internal_default_instance());
}
class SignalInfo::_Internal {
 public:
  static const ::streamer::CallInfo& call_info(const SignalInfo* msg);
  static const ::streamer::SystemInfo& system_info(const SignalInfo* msg);
  static const ::streamer::RecorderInfo& recorder_info(const SignalInfo* msg);
};

const ::streamer::CallInfo&
SignalInfo::_Internal::call_info(const SignalInfo* msg) {
  return *msg->call_info_;
}
const ::streamer::SystemInfo&
SignalInfo::_Internal::system_info(const SignalInfo* msg) {
  return *msg->system_info_;
}
const ::streamer::RecorderInfo&
SignalInfo::_Internal::recorder_info(const SignalInfo* msg) {
  return *msg->recorder_info_;
}
SignalInfo::SignalInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:streamer.SignalInfo)
}
SignalInfo::SignalInfo(const SignalInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  signaling_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_signaling_type().empty()) {
    signaling_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_signaling_type(),
      GetArena());
  }
  if (from._internal_has_call_info()) {
    call_info_ = new ::streamer::CallInfo(*from.call_info_);
  } else {
    call_info_ = nullptr;
  }
  if (from._internal_has_system_info()) {
    system_info_ = new ::streamer::SystemInfo(*from.system_info_);
  } else {
    system_info_ = nullptr;
  }
  if (from._internal_has_recorder_info()) {
    recorder_info_ = new ::streamer::RecorderInfo(*from.recorder_info_);
  } else {
    recorder_info_ = nullptr;
  }
  ::memcpy(&unit_id_, &from.unit_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&signal_type_) -
    reinterpret_cast<char*>(&unit_id_)) + sizeof(signal_type_));
  // @@protoc_insertion_point(copy_constructor:streamer.SignalInfo)
}

void SignalInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SignalInfo_streamer_2eproto.base);
  signaling_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&call_info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&signal_type_) -
      reinterpret_cast<char*>(&call_info_)) + sizeof(signal_type_));
}

SignalInfo::~SignalInfo() {
  // @@protoc_insertion_point(destructor:streamer.SignalInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SignalInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  signaling_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete call_info_;
  if (this != internal_default_instance()) delete system_info_;
  if (this != internal_default_instance()) delete recorder_info_;
}

void SignalInfo::ArenaDtor(void* object) {
  SignalInfo* _this = reinterpret_cast< SignalInfo* >(object);
  (void)_this;
}
void SignalInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SignalInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SignalInfo& SignalInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SignalInfo_streamer_2eproto.base);
  return *internal_default_instance();
}


void SignalInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:streamer.SignalInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  signaling_type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && call_info_ != nullptr) {
    delete call_info_;
  }
  call_info_ = nullptr;
  if (GetArena() == nullptr && system_info_ != nullptr) {
    delete system_info_;
  }
  system_info_ = nullptr;
  if (GetArena() == nullptr && recorder_info_ != nullptr) {
    delete recorder_info_;
  }
  recorder_info_ = nullptr;
  ::memset(&unit_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&signal_type_) -
      reinterpret_cast<char*>(&unit_id_)) + sizeof(signal_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SignalInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 unit_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          unit_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string signaling_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_signaling_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "streamer.SignalInfo.signaling_type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .streamer.SignalInfo.SignalType signal_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_signal_type(static_cast<::streamer::SignalInfo_SignalType>(val));
        } else goto handle_unusual;
        continue;
      // .streamer.CallInfo call_info = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_call_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .streamer.SystemInfo system_info = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_system_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .streamer.RecorderInfo recorder_info = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_recorder_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SignalInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:streamer.SignalInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 unit_id = 1;
  if (this->unit_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_unit_id(), target);
  }

  // string signaling_type = 2;
  if (this->signaling_type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_signaling_type().data(), static_cast<int>(this->_internal_signaling_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "streamer.SignalInfo.signaling_type");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_signaling_type(), target);
  }

  // .streamer.SignalInfo.SignalType signal_type = 3;
  if (this->signal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_signal_type(), target);
  }

  // .streamer.CallInfo call_info = 4;
  if (this->has_call_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::call_info(this), target, stream);
  }

  // .streamer.SystemInfo system_info = 5;
  if (this->has_system_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::system_info(this), target, stream);
  }

  // .streamer.RecorderInfo recorder_info = 6;
  if (this->has_recorder_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::recorder_info(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:streamer.SignalInfo)
  return target;
}

size_t SignalInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:streamer.SignalInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string signaling_type = 2;
  if (this->signaling_type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_signaling_type());
  }

  // .streamer.CallInfo call_info = 4;
  if (this->has_call_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *call_info_);
  }

  // .streamer.SystemInfo system_info = 5;
  if (this->has_system_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *system_info_);
  }

  // .streamer.RecorderInfo recorder_info = 6;
  if (this->has_recorder_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *recorder_info_);
  }

  // int64 unit_id = 1;
  if (this->unit_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_unit_id());
  }

  // .streamer.SignalInfo.SignalType signal_type = 3;
  if (this->signal_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_signal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SignalInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:streamer.SignalInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SignalInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SignalInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:streamer.SignalInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:streamer.SignalInfo)
    MergeFrom(*source);
  }
}

void SignalInfo::MergeFrom(const SignalInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:streamer.SignalInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.signaling_type().size() > 0) {
    _internal_set_signaling_type(from._internal_signaling_type());
  }
  if (from.has_call_info()) {
    _internal_mutable_call_info()->::streamer::CallInfo::MergeFrom(from._internal_call_info());
  }
  if (from.has_system_info()) {
    _internal_mutable_system_info()->::streamer::SystemInfo::MergeFrom(from._internal_system_info());
  }
  if (from.has_recorder_info()) {
    _internal_mutable_recorder_info()->::streamer::RecorderInfo::MergeFrom(from._internal_recorder_info());
  }
  if (from.unit_id() != 0) {
    _internal_set_unit_id(from._internal_unit_id());
  }
  if (from.signal_type() != 0) {
    _internal_set_signal_type(from._internal_signal_type());
  }
}

void SignalInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:streamer.SignalInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SignalInfo::CopyFrom(const SignalInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:streamer.SignalInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignalInfo::IsInitialized() const {
  return true;
}

void SignalInfo::InternalSwap(SignalInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  signaling_type_.Swap(&other->signaling_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SignalInfo, signal_type_)
      + sizeof(SignalInfo::signal_type_)
      - PROTOBUF_FIELD_OFFSET(SignalInfo, call_info_)>(
          reinterpret_cast<char*>(&call_info_),
          reinterpret_cast<char*>(&other->call_info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SignalInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace streamer
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::streamer::AudioSample* Arena::CreateMaybeMessage< ::streamer::AudioSample >(Arena* arena) {
  return Arena::CreateMessageInternal< ::streamer::AudioSample >(arena);
}
template<> PROTOBUF_NOINLINE ::streamer::RecorderInfo* Arena::CreateMaybeMessage< ::streamer::RecorderInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::streamer::RecorderInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::streamer::SourceInfo* Arena::CreateMaybeMessage< ::streamer::SourceInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::streamer::SourceInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::streamer::SystemInfo* Arena::CreateMaybeMessage< ::streamer::SystemInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::streamer::SystemInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::streamer::ConfigInfo* Arena::CreateMaybeMessage< ::streamer::ConfigInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::streamer::ConfigInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::streamer::CallInfo* Arena::CreateMaybeMessage< ::streamer::CallInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::streamer::CallInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::streamer::SignalInfo* Arena::CreateMaybeMessage< ::streamer::SignalInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::streamer::SignalInfo >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
